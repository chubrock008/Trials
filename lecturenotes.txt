So this is a new note series for coding
to create a new file using git bash we use the command 
    $ touch 'name of file.extension'(e.g touch index.html)

To create a git repository in a folder, 
    we have to first, add the folder to our workspace, then open the 
    folder in a our file explorer, right click, select the git bash 
    option. this will open up the dialogue box. then we input the command
    "$ git init" this will create a repository for your works here. FYI this 
    folder will be hidden, so to see it, we might have to enable hidden files

We also have to add our name and email address to the git repository. This is 
done with the following command
    $ git config --global user.name 'chubrock'
    $ git config --global user.email 'forchuby@gmail.com'

When we are stuck, we could ask git for help with the following command
    $ git help <verb>
    $ git <verb> --help

We can see a list of all the files we have in the directory with the command;
    $ ls will list all the vissible files in the directory
    $ ls -la will list all files (both hidden and visible) files in the directory

 If we want to stop trackinig a project all we have to do is delete the .git
 directory, we can do this 2 ways by physically deleting the directory/folder
 from file explorer or using the command below
    $ rm -rf .git   

Now that we have created a master repisotory we can add files, with the command:
    $ git add index.html 'to add individual file'
    
    $ git status "gives us the status of the files added, that are waiting
                  to be committed"

There are multiple ways to remove files from the staging area, they are shown below
    $ git rm --cached "file name" removes the git file from the commited branch.
    $ git reset will remove all files from the stagging area
    $ git reset log.txt will remove the particular file
    
    $ git add *.html will add all files with ".html" attached to them
    $ git  add -A will add all untracked files to the staging area
    $ git add "." will add all the files in the directory to the master
   
    $ git commit will commit all files in the staging area. when using Visual Studio
        Code, a pop will appear on the editor. remove the '#' infront of the initial 
        commit, save (i think) then close the window to approve commit. there's a 2nd 
        method which will be shown below.
   
    $ git commit -m 'coment goes here' (e.g $ commit -m 'changed app.js'). the -m stands
        for message hence we add the ''. this way we can track all the commits,
        that is why it is important to leave good reference messages.
    
    $ git log shows all the commits that have been carried out in that particular directory

If the command line editor is cluttered you can clear the screen by using the command below    
    $ clear this removes everything on the bash dialogue box.
    
    $ touch ".gitignore" will create a ignore folder for git. this cant be created in 
        file explorer as windows will think its a empty name file. so it has to be created 
        on the bash command line interface.
        All files added to this file/folder will not be committed. To add files to this 
        directory all we do is input the name of the file, in the .gitignore directory 
        on our editor. E.g (open .gitignore on the editor and type in log.txt and save).
        all changes made to this file wont show up when checking status and wont be uploaded
        to the master repository.
        It is also possible to exclude entire directories as well, this can be done by
        adding the directory to the ignore repository like this 
        "/dir1" [r "/dir2"] in the .gitignore directory.

We can create a branch in the master directory, this way if i am working with multiple people 
i can still work on my own piece of the code without affecting what the others are doing. it is
useful when i want to work on specific areas of the code or a specific feature, i can create a 
branch and play around with before merging to the master. the command for creating branches are 
as follows

    $ git branch "chuby's branch"

If we want to switch to the branch we want to work on. In this case it is chuby's branch, so the 
above listed command will take us there and all changes we make there will be committed to that 
branch as opposed to the master branch. 

    $ git checkout chuby's branch, 

    $ git checkout login will allow us to switch from the master branch to the local branch 
        we want to edit, which will be the "login branch" in this instance. When we switch to 
        the login branch we can edit changes locally that can be added later to the master

you can clone a remote repository by using the command below, this will probably be how most tasks
will be gotten (for employees) so we clone the directory and work on our own tasks
   
    $ git clone <url> <where to clone> (e.g $ git clone https://github.com/Corey/remote_repo.git .)
    $ git clone ../remote_repo.git .
    the "." refers to this current directory

To view information about the remote repository we use the following commands
    $ git remote -v (shows information about repository)
    $ git branch -a (showns information about the branch)

To keep an online backup of your code, we can upload them to github. see the command below

    $ git remote  (this shows the active repositories where code will be commited.) 
    $ git remote rename OLDNAME NEWNAME (this will rename the repositiry)
    
to add your own repository, go to github and copy the repository address like below

    $ git remote add origin https://github.com/chubrock008/Collection1.git (this allows us to a
        repository where we publish/upload our code to a specific git repository. This repository 
        is created on github and we can get the necessary address/path from there.)

After we have completed our task for/with the code, we will want to push it to the central 
repository, especiially in cases where there are multiple people working on the same code, and 
they have been pushing code to that repository we want to pull all the changes in code from the
the repository before we add our own changes. find below commands for pull and push

    $ git pull -u origin master
    $ git pull origin master

    $ git push -u origin master 
    $ git push origin master

This allows to push our code to the master repository on our github. here the "-u" means that, we 
want git to associate the local branch/master with the remote branch/master. this way we dont have to 
include "-u" in future push requests, we can just say push origin master

If we want to merge a branch, its advisable to create a pull request from the master branch just to 
make sure that we have the most updated version of the code, before we initialize the merge. this can be
done with the command below

If we want to merge a local branch to the master branch we use the command
    
    $ git merge <branch name> 

If we want to see the merged files we use the command

    $ git branch --merged
    
After merging the local branch to the master, we can delete the local branch as it is no longer useful
to us. this can be achieved with the following command

    $ git branch -d "branch name" (in this case -d = delete)
    
We can also delete the branch from the remote repository, this is achieved with the input below
 
    $ git push origin --delete "branch name" 

We can also fork a repo (repository), this is similar to cloning a repo but from my understanding,
this is when you copy an entire repo from a user account to another user account. e.g i can fork 
the entire biffy-sylabus repo from greenfox github account to my own github account. this way i will
have the entire content of the repo and its entire history. to this regard, i dont have to worry 
about changes i make on the files in that repo as it doesnt affect the original core one. there are
two ways to fork a repo and they are as follows;

    go to the actual file/code/branch to want to fork and click on it, in the right corner there will
    be a pencil icon and when you hover over it, you will see it gives you the option to fork and edit
    cos github knows you dont have the necessary permission. then we select where we want to fork the
    repository

    The second method is to click on the fork option which is located on the top right corner as well
    but is located above the afromentioned option above, the symbol for this fork option is like 2 
    branches connected to one/similar to wlan symbol. then we select where we want to fork the
    repository
When the fork is complete and we comlete the changes we are making, we can can chose to 
"to save & commit to master (our local master in this case)" or "Create a new branch & start pull request" 
after all this is done you can now create a pull request to the source repo, to have them merge the changes

We can also do a pull request. What this means is that i want to add changes to the code in a repo
(e.g on greenfox github account) but because i dont have permission to make changes on the repo, 
someone with access will have to accept the chages, so we create a pull request for someone with 
access to authenticate. As a rule of thumb, if i am sending something out its a push request, if i 
am getting something in, its a pull request. Be aware however, that your acces/permission to the 
repo in question will affect those terminologies.


WEEK 4 BEGINING 
-------------------------------------
What is javascript? its a scripting language that is great at manipulating webpages but is kinda limited
when compared to other programming languages. it can also be described as a client side language as everything
is done on the client's browser as opposed to the backend/Server like (Ruby on Rails, PHP, ASP.NET). |Also,
there's no relationship between Javascript and Java, they are 2 different programming languages.

What is typrscript? its a collection of libraries for javascript!

When running scripts it is essential to put the script command (e.g an "alert" <script> alert ("message");) on 
the bottom of the body section this way, the content of the page will load before the popup alert. This way 
you can see some info while the popup is displayed. This did not work for me as the page kept displaying a blank 
page while the popup is displayed. if the popup message you want displayed is long (multiple lines), it is advisable 
to add it to an external file so you dont clutter the code and if the same message is used in multiple locations, it 
can be edited to once for the multiple use cases. P/S: after i added my message to an external source and the page loaded
along with the popup message.
    <script> alert("Hello World"); </script>
    <script src="message.js"></script> (this is how we link the script. FYI you might have to put the path/url to get the right file)

Also note that javascript is case sensitive. Also note that ";" signifies the end of a statement, this means we can list 
multiple statements in one line of code but this will make your code ugly however. So its advisable to put one line per 
statement, so its crucial to add the semicolon at the end of each argument. 
To add one-line comments to your code just add "//"
To add multi line comments we use /**/
JS runs from top to bottom

Variables are used to store information in JS. For example, we can store the cordinates of an image or customer name in a Variable.
we can describe variables with the "var" command , pls dont start with a number;
    var myvariablechuby1;
    myvariablechuby1 = 1 (will now assign a value to that variable. if it's a string use " or ', dont forget ";" at the end) 
    var myvar2 = "hello"; (same as above just combined into 1 line.)
initialize variables with the keyword "var" and we can set them to a value in the same statement. try to have a specific naming convention.
you can change variable type but it isnt recommended. we dont have to specify the type of variable. you can use special characters but dont 
start with numbers.

var vs let. "var" uses function scope. it can be changed with basic JS math functions. 
    var y=1 (means "y" is a variable with the value of 1. could be a string as well e.g. "var y=hello")

"let" uses block scope. 

"const" helps improve efficieny & memory usage for the code, used for variables that are unchanging, what this means is that it cant be changed. 
so if we have a 
    "const y = 50;",  trying to change "y" will generate an error message. But if we have say 
    "const y = {a: 100, b: 100};" we can change the values inside the "const y" with the command "y.a = 200". 
    you can also add more to the const by using y.c=110; this will change y into (const y = {a:100, b:100, c:110})

Common operators for js include the following;
    =: assignment       +: addition         -: Subtraction
    /: division         *: Multiplication   "": anything inside's a string
    NaN: not a number   
    "+= x": equal to plus number (works for =,*,/) 
    "%": This prints the remainder after a division. so after you divide what cant be divided further. 
       
    console.log("hello world"): Prints hello world on the console
    document.write("hello world"): Prints hello

Booleans are used to check conditions of certain scenarios 
    var ilikemeat = true (you dont have to put "" cos its a Booleans)
    <,>: "comparison indicators "generates true or false statement""
    "==": is used to check if 2 values are equal"
    "===" is used to check if the values and type (i.e integer or string) are equal/ the same.
    "!=": it means not equal to.
    "Math.pow (7,3)": prints 7^3

    document.write(chuby): type in this in the console will allow you to clear the website and
    write out chuby on the page   

if statements are used to check/add functionality to a statement/querry
    var youlikemeat = true;
    "if (true)" or "if (youlikemeat)" {"code block"} 
    "if (true) {codeblock} else {Codeblock}": this tells the code to do 2 if 1 is false.

else if" statements are used to go through multiple functions. so we can stack multiple
statements for the code to run through. 
    if (true) {{codeblock}; else if {my age > 20} {codeblock}; 
    else if {...} {codeblock}; else {..}{codeblock};}

&&: it is used to add an and to the statement. this is useful when we want two conditions
to be fulfiled before the statement passes as true.
    &&: means "and"
    "||": it means "or"

While statements are used to set conditions that must be met. its a loop and a limit must be 
set or else program will keep running (i.e infinite loop) and cause pc to crash
    while (condition) {codeblock} {incrementor}

For statements used most frequently as its more pleasing to the eye.
    for (initial/index variable; condition; incrementor/afterthought) {codeblock}
    for (let i: number = 0; i < 100; i++) {console.log(i); // Prints the numbers from 0 to 99
        }
Break & Continue. is broken into 2, Break is used to break out of a loop. Continue is used in
specific loops, so if certain conditions are met dont execute the other codeblock.
    for (i=0; i<10; i++) {
    if (i ==5 || i===3) {continue}}
    console.log(i); if (i===7) {break;}
    console.log("i am outta the loop")

function functionname (variables) {codeblock}
    function getAverage (a,b) {
        var average = (a+b)/2;
        console.log(average);
    }
    getAverage(7,12);
==================================================================================

    function getAverage (a,b) {
        var average = (a+b)/2; (// local variable)
        console.log(average);
        return average;
    }
    var myResult = getAverage(7,12); //globala variable
    console.log("the average is" + myResult);

Variable scope determines where in the code a variable is visible and which part 
of the code can use it. there are 2 types global and local. Global can be defined outside
of a functionn(i.e i can call it up anywhere in the code). While a local variable is 
defined inside of a function, so it cannot be called up outside that function.

Strings are detonated with "" or ''. so we have to be careful when mixing them so we dont accidently 
close a string to that effect we have to carefully utilize the quotations to avoid errors
    var myString = 'I/'m a "fun" string';
    console.log(myString);
    the result will be 'I'm a "fun" string'
in the course of searchiing a string, we find that what we our looking for isn't 
included the console will return a message of
    -1 which means that what we are looking for cant be found

to run your code on the local terminal, use the command below;
    npx ts-node "filename"

"`" or the first number key on ENG keyboard, allows us to insert code within code. what
this means is that we can insert code into a string to get our desired resut. see e.g below;
    for (let i: number = 1; i <= 10; i++)  {
      const result = i*n;
      console.log(`${i} * ${n} = ${result}`);  //prints output 1*15 = 15;   
    } 

slicing strings can be achieved with the command below (let str:string = 'Hello world')

    str.slice(2,9);  //this will cut the string at index "2 & 9" printing "llo, wo"
    str.slice(2);   //this will print from index '2 untill the end' printing "llo, world"

Spliting strings allows us to split the strings into different pockets and place them in 
different arrays. example; "let tags = "meat, ham, salami, pork, beef, chicken";

    let tagsArray = tags.split(",")  //this will split the string at everypoint there's a comma
                                     and place it in different array pockets like below
    
    tagsArray will now be ['meat', 'ham', 'salami', 'pork', 'beef', 'chicken']


WEEK 5 BEGINING
-------------------
Arrays are list of values seperated by commas, embeded in an enclosed in a square brackets. the
orders in the array is critical 

    (e.g var num =[5,3,9,-2, 8] with '5' being index 0 & 3 being index 1) and so on;


when coding if we dont usually work with the whole array, but if we say 'num[2]' it means we are calling '-2' from
the array, cos it is the value with 'index 2'.

Anything can be added to an array (objects, numbers, strings, properties, etc). to find the lenght 
of an array we can use the command below for an array called 'let words =['rainbow','heart','purple','ginseng','']'

    console.log (words.lenght) //which equals 5 in our example;

    let strArr1: string[] = ['Hello', 'world'];   //creates an array with the listed contents;
    let strArr2: Array<string> = ['Hello', 'world'];   // another syntax for creating arrays like above
    
    let myArray = new array (5); // this will create an array with 5 pockets
    let myArray2 = [];   //
    let anyArr: any[] = ['Hello', 10, true];   // this allows the array to contain any combination of data

A tupple is a special type of array that lets you specify what type the array can carry
    let myTupple: [string, number]  // this allows only numbers and strings to the array;

"-1" is used to denote the abscence of an element, when using the "index of ()" method 

    var arr = ['apple','orange','pear'];
    console.log("found:", arr.indexOf("orange") != -1); // means that we want to know if 'orange' is not absent;

SPLICE; this method changes the array by modyfying the content of the array. this is achieved by adding 
or removing/replacing of the existing items. find syntax below;

    array.splice(index, deleteCount, item1, item2, item3, ....)

ForEach; this method executes a provided function once for each element in the array. see syntax below;

    arrayName.forEach(element => { });

we use the 'callbackfn' when the array has indexes with assigned values. it is not invoked for empty slots 
in the 'sparse arrays'. a sparse array is an array in which most of the elements have the same 
value (the default is 0 or null)

"MAP"; this method creates a new array populated with results of calling a provided function on every 
element in the calling array. see syntax below

    map1 = arrayName.map(x => x);
    console.log(map1);
    arrayName.map((x) => x**2); // means x^2 (== x squared);

FILTER; this method creates a shallow copy of a portion of a given array, filtered down to the elements
described by the function.

    function isBigEnough(value) {
        return value >= 7;
    }
    let filtered = [6, 7, 8, 9].filter(isBigEnough);
    console.log(filtered);

"SOME USEFUL NOTES"
----------------------
~ new Array(i); this creates a new array with lenght i. so we could use this method like this; let testArray = new Array (5).
~ arrayName.push(); this adds a new element to the array with the content in the brackets
~ arrayName[i] = x; this adds a new element x to the array at index i.
~ [orders[0], orders[2]] = [orders[2], orders[0]]; swaps the element content at the stated index
~ i++; i++ will increment the value of i, but return the original value that i held before being incremented.
~ ++i; ++i will increment the value of i, and then return the incremented value.
~ '?'/ name?; here the question mark '?' is used to detonate that the variable is optional. that means it doesnt have to be filled out. 
~ '...' see triple period from line 474'ish for more info. used to overite/update  array contents depending on context.

~ console.log(colors[i]+ ' '); i found that adding '' to an array element like earlier, will result in the array being printed without the square brackets.

~ reverse(); we use this syntax to reverse array elements. this can be achieved the following way.
    let arrayName: number [] = [1,2,3,4]
    arrayName.reverse(); this will result in the output [4,3,2,1].


FUNCTIONS; these are the basis for writing code, so when we have multiple lines of code, we have to group them in chunks and this is where the function helps us. see the syntax below;
    function 'functionName' '(variables)' {
        codeblock
    }
    functionName(variables); //(this is where we call the function)
we can also use the result of a function to compute more complex code, see syntax below
    function getAvg (a,b) {
        let avg = (a+b)/2;
        console.log(avg);
        return avg;
    }
    let myResult = getAvg(5,6);
    console.log('the average is ' + myResult);

normal function statement is a standalone function with a name, see syntax
    function sayHi() {}
        sayHi();

function expression/ anonymous functions, this is when you make a variable equal to a function. there's also no need for the function to have a name, this means its an anonymous function i.e they are bound by no identifier. FYI anonymous functions can also have the variable included. see the syntax below
    let sayHi = function () {}
        sayBye();
Optional parmameters;  allows us to state what type the inout parameter will be.

Rest Parameters; these dont restrict the number of parameters that can pass through a function. they are declared by adding three periods as a prefix. see syntax below;
    function addNumbers(...nums:number[]) { codeblock }

Default Parameters; functions can also be assigned default parameters i.e the value is explicitedly stated. it is important to note a parameter cant be declared optional & default at the same time. see syntax below;
    function function_name(param1[:type],param2[:type] = default_value) {   codeblock    }

Function Constructor; there's an inbuilt function constructor in our editor. see the syntax below;
    let res = new Function( [arguments] ) { ... }
    see eg below;
        var myFunction = new Function("a", "b", "return a * b"); 
        var x = myFunction(4, 3); 
        console.log(x);

Recursion; this is a technique for iterating over an operation by allowing the function call on itself repeatedly, until it arrives at a certain result. see the example below;
    function factorial(number) {
    if (number <= 0) {         // termination case
        return 1; 
    } else {     
        return (number * factorial(number - 1));     // function invokes itself
   } 
    }; 
    console.log(factorial(6));

Lamdba functions; these are also known as anonymous functions, they represent a concise mechanism to represent anonymous functions. there are 3 parts to a lambda functions anatomy and they are as follows;
    Parameters; a function might optionally have parameters
    The Fat Arrow/Lambda Notation (=>); also known as goes to operator
    Statements; represents the functions instruction set

syntax for lambda function can be seen below;
    ( [param1, parma2,…param n] ) => statement; 

    see e.g below
    var foo = (x:number)=>10 + x 
    console.log(foo(100)) 

    vs regular anonymous function
    var foo = function (x) { return 10 + x; };
    console.log(foo(100));

Block Scoping; this is when a variable is not visible/usable outside of the nearest containing block or for loop.

Shadowing; this is when we introduce a new name in a more nested scope. it isn't good practise but in certain situations, it is unavoidable. see e.g below;
    for (let i=0; i<array.lenght;i++) {
        for (let i=0; i<currentRow.lenght) {}
    }
for more info on typescript functions visit //https://www.tutorialspoint.com/typescript/typescript_functions.htm.

Triple Period(...); this has many uses that depends on where you place. if you have an object e.g let adrian = {.,..,...,....} and we want to use part of the object in a new object. we could use the content of adrian to fill up bill for e.g. \See e.g let bill = {...adrian,., ..}. so we have to reference adrian in the bill section of the object to have those elements present in bill and the rest of the elements filled out with what was provided in the 'bill' object. basically it avoids duplicates as it only fills out the new information provided by the coder.
The process is slightly different for arrays as it expands or spreads the indexes and values, which might lead to duplications. see e.g below
    const num1 = [1,2,3,4,5];
    const num2 = [...num1,1,2,6,7,8]; // this will produce [1,2,3,4,5,1,2,6,7,8]. 
    in a way, its a replacement for  Array.prototype.concat.

Syntactic Variations; if data type is not specified, the default of any will be used

Function Overloads; this allows the functions to operate differently on the basis of the input provided. see examples below;
datat type of parameter: 
    function disp (string): void
    function disp(number): void

the number of parameters
    function disp(x:number,y:number):void;

The sequence of parameters
    function disp(n1:number,s1:string):void; 
    function disp(s:string,n:number):void;
example:
    function disp (x:any, y?:any): void {}; // means that variable 'y' is optional.

