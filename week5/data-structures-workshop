"use strict";

// Below is a famous sentence from the beginning of a famous movie, but it has a problem.
// Someone played a prank on us and replaced the word "galaxy" with "dishwasher".
// Please fix the sentence so that the code prints "In a galaxy far, far away" to the console

function simpleReplace() {
  // write your code here
  
  let example = "In a dishwasher far, far away";
  let newExample = example.replace((/Dishwasher/gi), 'galaxy');

  //console.log(example);
  console.log(newExample);  
}

simpleReplace();

export { simpleReplace };
//==================================================================================================================

"use strict";

// Create an empty array which will contain names (strings)
// Assign the type string[] to the array
// Print out the number of elements in the array
// Add "William" to the array
// Print out whether the array is empty or not
// Add "John" to the array
// Add "Amanda" to the array
// Print out the number of elements in the array
// Print out the 3rd element
// Iterate through the array and print out each name one by one
// Iterate through the array again and print all values with an index number
// Remove the 2nd element
// Iterate through the list in a reversed order and print out each name
// Remove all elements
// Print out the number of elements in the list

// The result should look like this in the console:
// 0
// false
// 3
// Amanda
// William
// John
// Amanda
// 1. William
// 2. John
// 3. Amanda
// Amanda
// William
// 0

export function listIntroduction1() {
  // add your code here
  let newArray: string [] = [];
  console.log(newArray.length);

  newArray.push('William');
  if (newArray.length > 0) {
    console.log("it is not empty");
  }

  newArray.push("John");
  newArray.push("Amanda");
  console.log(newArray.length);
  console.log(newArray[2]);  

for (let x=0; x < newArray.length; x++) {
    
    let index = newArray.indexOf(newArray[x]);
    let value = newArray[x];

    console.log(index + '. ' + value);        
  }

newArray.splice(1, 1);
// console.log(newArray.reverse());
let reverseArray: string [] = newArray.reverse();

reverseArray.forEach(element => {
  console.log(element);  
});

newArray.splice(0,2);
console.log(newArray.length);  
}
listIntroduction1();
//=================================================================

"use strict";

// "Saturn" is missing from the planetList below
// Insert it into the correct position (should go between Jupiter and Uranus)
// Create a function called "putSaturn()" which has an array parameter and returns the correct array

const planetList: string[] = [
  "Mercury",
  "Venus",
  "Earth",
  "Mars",
  "Jupiter",
  "Uranus",
  "Neptune",
];

export function putSaturn(planetList: string[]) {
    planetList.splice(5, 0, 'Saturn');
    console.log(planetList);     
}
putSaturn(planetList);
{ putSaturn };
//========================================================================================================

"use strict";

// Accidentally I got the wrong URL for a funny subreddit. It's probably "odds" and not "bots".
// Also, the URL is missing a crucial component, find out what it is and insert it too!

export function urlFixer() {
  let url = "https//www.reddit.com/r/nevertellmethebots";
 
  // write your code here
    let word = 'odds'; 
    let missingPart = 'https:';
    let url2 = url.substr(0, 38);
    
    let newUrl2 = url2.concat(word);
    url = newUrl2 

    let url3 =url.substring(5, 42);
    let newUrl3 = missingPart.concat(url3);
    
    url = newUrl3;
   
  console.log(url);
}

urlFixer();
//==============================================================

"use strict";

// Create an empty object where the keys are integers and the values are characters d
// Assign the type Record<number, string> to the object d
// Print out whether the object is empty or not d
// Add the following key-value pairs to the object
//  | Key | Value |
//  | 97  | a     |
//  | 98  | b     |
//  | 99  | c     |
//  | 65  | A     |
//  | 66  | B     |
//  | 67  | C     |
// Print all the keys
// Print all the values
// Add value D with the key 68
// Print how many key-value pairs are in the object
// Print the value that is associated with key 99
// Remove key 97 from the object
// Print whether there is an associated value with key 100 or not
// Remove all the key-value pairs
// Print how many key-value pairs are in the object
//
// Expected output
//
// true
// [ '65', '66', '67', '97', '98', '99' ]
// [ 'A', 'B', 'C', 'a', 'b', 'c' ]
// 7
// c
// false
// 0

export function mapIntroduction1() {
  // write your code here
  
  type input = Record <number, string>; // this describes the type for the input.

  let myObject: input = {97: 'a', 98: 'b', 99: 'c', 65: 'A', 66: 'B',  67: 'C'}; // the type of the expected input is after the object name.

  if (Object.keys(myObject).length != 0) {
      console.log('Object is not empty');
  } 
  else {
      console.log('Object is empty');    
  }

  console.log(Object.keys(myObject));
  console.log(Object.values(myObject));

 myObject [68] = 'D';     // when using numbers as keys, i think its better to use square brackets as the addition method.
 // console.log(Object.keys(myObject));
 console.log((Object.keys(myObject)).length); 
 console.log("The result is: " + myObject[99]);
 // console.log((Object.values(myObject[99])));

 delete myObject [97];
  
console.log(myObject.hasOwnProperty(100));

for (var val in myObject) {
  delete myObject[val];  // the val can be any name eg mop, head, etc
  // console.log(myObject[index]);  
}

// myObject = {}; // is also a solution to deleting the entire object elements.
console.log((Object.keys(myObject)).length);
}

mapIntroduction1();
//=======================================================================================

"use strict";

// Write a function that joins the two lists by matching one girl with one boy into a new list
// If someone has no pair, he/she should be added to the list on his/her own
// Expected output: ["Eve-Joe", "Ashley-Fred", "Claire-Tom", "Kat-Todd", "Jane-Neef", "Jeff"]

// write your code here

const girls: string[] = ["Eve", "Ashley", "Claire", "Kat", "Jane"];
const boys: string[] = ["Joe", "Fred", "Tom", "Todd", "Neef", "Jeff"];

function makeMatches (girls :string[], boys :string[]) {
    let makeMatches: string[] = [];

    for (let x=0; x < boys.length; x++) {
        
        if (girls[x] != undefined) {        
            makeMatches.push(girls[x] + '-' + boys[x]); // so what i want is to push each iteration into an array/object and log them together as one array/object element;
        } else {
            makeMatches.push(boys[x])
        }
    }
    console.log(makeMatches);    
}
(makeMatches(girls, boys));
export { makeMatches };








