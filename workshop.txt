

Check the current working directory
    $ pwd --> (This generates the current path we are on)

Check the files and directories in your working directory
    $ ls (shows all vissible files & directories)
    $ ls -la (shows both visible & hidden files & rectories)

Create a greenfox directory & 
    $ mkdir greenfox

Change into the greenfox directory
    $ cd greenfox
    $ cd .. (this takes you back one dirctory/path/step)

Change owner of a file
    $ chown <user> <new root>

Create an empty index.html file
    $ touch index.html

Copy & Delete a file
    $ rm filename.extension (e.g rm index.html)

Delete a dirctory
    $ rm -r directory name (e.g rm -r greenfox)

Copy a file
    $ cp filename.ext directory (e.g cp index.html Coding )

Copy a directory
    $ cp directory-name-1 directory-name-2 (e.g cp -r greenfox Coding)

Echo a string to a file. this is a built in command used to display text on screen
it is importatnt to note that this are linux commands
    
    $ echo [option]. see links for more
    
    https://www.geeksforgeeks.org/bash-scripting-bash-echo-command/
    https://www.geeksforgeeks.org/echo-command-in-linux-with-examples/
    
    
    -n: doesnt print the trailing newline
    -E default option, disables the implementation of Escape sequence
    -e: used to enable interpretation of backlash Escape

    \b: Backspace (removes the space before the string)
    \\: Backslash (adds a backslash)
    \n: New Line (creates a new line)
    \r: Carriage Return (deletes string elements before \r)
    \t: Horizontal Tab (Used to create horizontal tab spaces)
    \v: Vertical Tab (Used to create vertical tab spaces)
    \a: To have sound alert/bell
    echo *: Tgis command will print all files/folders similar to ls command

Cat a file content. This allows us to display the content of one or more
files without having to open the file for editing. The cat command follows 
the format shown below;
    $ cat [options] filename(s)

    $ cat >test1.txt (creates a new text file, cursor starts on new line for your text. to exit prompt press Ctrl + d)
    $ cat test1.txt [This displays contents of a single file]
    $ cat test1.txt test2.txt (This displays content of multiple files)
    
    $ cat test1.txt > test3.txt (copy contents from file 1 to file 3)
    $ cat test1.txt test2.txt > test3.txt (copy contents for multiple files to 1 file)
    
    $ cat test1.txt >> test3.txt (Append file content to another file i.e add content to end of the file)
    $ cat >> test1.txt (Append text to existing file, hold Ctrl + d when your done)
    $ cat test1.txt test2.txt >> test4.txt (Append files 1 & 2 to file 4)
    
    $ tac test3.txt (display contents in reverse order)
    $ cat "test4.txt | more" & "cat test4.txt | less" (displays file in single page. helps with scrolling forward & backwards)
    $ cat -n test4.txt (shows number of lines of code)
    $ cat -e test4.txt (shows the end of each line of code with the "$" sign)
    
    $ cat --help (displays a list all CAT Commands)

Pipes helps us redirect output to another destination for further processing. See examples below;
    $ ls -la > bob.txt (means we should dump the list of files in the directory to a file named bob.txt)
    $ Cat names.txt | sort (Sorts the names in the text file in alphabetical order)
    $ Cat names.txt | sort | uniq ( You can add many options/Pipes with the "|" sign.)

Grep help us search throug the lines of code and filter out the ones that match the provided string. See example below;
    $ Cat Names.txt | grep Adaku (searches the file "Names.txt" for the name "Adaku" FYI: its case sensitive)
    $ cat names.txt | grep -v Adaku (Prints everything on the list that isnt Adaku)
    with the help of pipes we can combine different commands to one line of code

"wc" this program/command helps us count lines, words and characters. All three can be done at once or we can specify what we want.
    $ wc test1.txt (will give an out put # of lines, # words, # characters). FYI space means new words

TO FINISH
    $ git add . (to add all my changes)
    $ git commit -m "end of git"
    $ git push -u origin master

    check github